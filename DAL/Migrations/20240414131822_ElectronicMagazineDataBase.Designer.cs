// <auto-generated />
using System;
using DAL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240414131822_ElectronicMagazineDataBase")]
    partial class ElectronicMagazineDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FacultyesId")
                        .HasColumnType("int");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyesId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyesId = 1,
                            NameDepartment = "ИП"
                        });
                });

            modelBuilder.Entity("DAL.Models.Disciplines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisciplineName = "КИС"
                        },
                        new
                        {
                            Id = 2,
                            DisciplineName = "РПИ"
                        },
                        new
                        {
                            Id = 3,
                            DisciplineName = "ОСиСП"
                        },
                        new
                        {
                            Id = 4,
                            DisciplineName = "ОУИС"
                        },
                        new
                        {
                            Id = 5,
                            DisciplineName = "ПМП"
                        },
                        new
                        {
                            Id = 6,
                            DisciplineName = "БЖЧ"
                        },
                        new
                        {
                            Id = 7,
                            DisciplineName = "ФизКульт"
                        },
                        new
                        {
                            Id = 8,
                            DisciplineName = "Экономика"
                        },
                        new
                        {
                            Id = 9,
                            DisciplineName = "ММСС"
                        });
                });

            modelBuilder.Entity("DAL.Models.Facultyes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameFaculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facultyes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameFaculty = "ФАИС"
                        });
                });

            modelBuilder.Entity("DAL.Models.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("NameGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberGroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Course = 3,
                            DepartmentId = 1,
                            NameGroup = "ИП",
                            NumberGroup = 2
                        },
                        new
                        {
                            Id = 2,
                            Course = 3,
                            DepartmentId = 1,
                            NameGroup = "ИП",
                            NumberGroup = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.GroupsSchedules", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("SchedulesId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "SchedulesId");

                    b.HasIndex("SchedulesId");

                    b.ToTable("GroupsSchedules");

                    b.HasData(
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 1
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 2
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 3
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 4
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 5
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 6
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 8
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 9
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 10
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 11
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 12
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 13
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 14
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 15
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 7
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 16
                        },
                        new
                        {
                            GroupsId = 1,
                            SchedulesId = 17
                        });
                });

            modelBuilder.Entity("DAL.Models.Marks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MarksCount")
                        .HasColumnType("int");

                    b.Property<int>("PairsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PairsId");

                    b.HasIndex("StudentId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("DAL.Models.Pairs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SlotScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TypePair")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SlotScheduleId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("DAL.Models.Schedules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisciplinesId")
                        .HasColumnType("int");

                    b.Property<int>("TypeSchedule")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinesId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisciplinesId = 1,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 2,
                            DisciplinesId = 2,
                            TypeSchedule = 1,
                            WorkerId = 2
                        },
                        new
                        {
                            Id = 3,
                            DisciplinesId = 3,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 4,
                            DisciplinesId = 1,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 5,
                            DisciplinesId = 4,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 6,
                            DisciplinesId = 4,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 7,
                            DisciplinesId = 5,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 8,
                            DisciplinesId = 9,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 9,
                            DisciplinesId = 7,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 10,
                            DisciplinesId = 6,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 11,
                            DisciplinesId = 3,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 12,
                            DisciplinesId = 5,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 13,
                            DisciplinesId = 8,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 14,
                            DisciplinesId = 9,
                            TypeSchedule = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 15,
                            DisciplinesId = 2,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 16,
                            DisciplinesId = 8,
                            TypeSchedule = 0,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 17,
                            DisciplinesId = 6,
                            TypeSchedule = 0,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.Slots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfTheWeek = 1,
                            End = new TimeSpan(0, 9, 40, 0, 0),
                            Start = new TimeSpan(0, 8, 20, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfTheWeek = 1,
                            End = new TimeSpan(0, 11, 25, 0, 0),
                            Start = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfTheWeek = 1,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            Start = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfTheWeek = 1,
                            End = new TimeSpan(0, 14, 55, 0, 0),
                            Start = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfTheWeek = 1,
                            End = new TimeSpan(0, 16, 30, 0, 0),
                            Start = new TimeSpan(0, 15, 5, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfTheWeek = 2,
                            End = new TimeSpan(0, 9, 40, 0, 0),
                            Start = new TimeSpan(0, 8, 20, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfTheWeek = 2,
                            End = new TimeSpan(0, 11, 25, 0, 0),
                            Start = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DayOfTheWeek = 2,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            Start = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            DayOfTheWeek = 2,
                            End = new TimeSpan(0, 14, 55, 0, 0),
                            Start = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            DayOfTheWeek = 2,
                            End = new TimeSpan(0, 16, 30, 0, 0),
                            Start = new TimeSpan(0, 15, 5, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            DayOfTheWeek = 3,
                            End = new TimeSpan(0, 9, 40, 0, 0),
                            Start = new TimeSpan(0, 8, 20, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            DayOfTheWeek = 3,
                            End = new TimeSpan(0, 11, 25, 0, 0),
                            Start = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            DayOfTheWeek = 3,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            Start = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            DayOfTheWeek = 3,
                            End = new TimeSpan(0, 14, 55, 0, 0),
                            Start = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            DayOfTheWeek = 3,
                            End = new TimeSpan(0, 16, 30, 0, 0),
                            Start = new TimeSpan(0, 15, 5, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            DayOfTheWeek = 4,
                            End = new TimeSpan(0, 9, 40, 0, 0),
                            Start = new TimeSpan(0, 8, 20, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            DayOfTheWeek = 4,
                            End = new TimeSpan(0, 11, 25, 0, 0),
                            Start = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            DayOfTheWeek = 4,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            Start = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            DayOfTheWeek = 4,
                            End = new TimeSpan(0, 14, 55, 0, 0),
                            Start = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            DayOfTheWeek = 4,
                            End = new TimeSpan(0, 16, 30, 0, 0),
                            Start = new TimeSpan(0, 15, 5, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            DayOfTheWeek = 5,
                            End = new TimeSpan(0, 9, 40, 0, 0),
                            Start = new TimeSpan(0, 8, 20, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            DayOfTheWeek = 5,
                            End = new TimeSpan(0, 11, 25, 0, 0),
                            Start = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            DayOfTheWeek = 5,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            Start = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            DayOfTheWeek = 5,
                            End = new TimeSpan(0, 14, 55, 0, 0),
                            Start = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            DayOfTheWeek = 5,
                            End = new TimeSpan(0, 16, 30, 0, 0),
                            Start = new TimeSpan(0, 15, 5, 0, 0)
                        });
                });

            modelBuilder.Entity("DAL.Models.SlotsSchedules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SchedulesId")
                        .HasColumnType("int");

                    b.Property<int>("SlotsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchedulesId");

                    b.HasIndex("SlotsId");

                    b.ToTable("SlotsSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchedulesId = 1,
                            SlotsId = 2
                        },
                        new
                        {
                            Id = 2,
                            SchedulesId = 2,
                            SlotsId = 3
                        },
                        new
                        {
                            Id = 3,
                            SchedulesId = 3,
                            SlotsId = 4
                        },
                        new
                        {
                            Id = 4,
                            SchedulesId = 4,
                            SlotsId = 5
                        },
                        new
                        {
                            Id = 5,
                            SchedulesId = 5,
                            SlotsId = 6
                        },
                        new
                        {
                            Id = 6,
                            SchedulesId = 6,
                            SlotsId = 7
                        },
                        new
                        {
                            Id = 7,
                            SchedulesId = 8,
                            SlotsId = 8
                        },
                        new
                        {
                            Id = 8,
                            SchedulesId = 9,
                            SlotsId = 9
                        },
                        new
                        {
                            Id = 9,
                            SchedulesId = 10,
                            SlotsId = 12
                        },
                        new
                        {
                            Id = 10,
                            SchedulesId = 11,
                            SlotsId = 13
                        },
                        new
                        {
                            Id = 11,
                            SchedulesId = 12,
                            SlotsId = 14
                        },
                        new
                        {
                            Id = 12,
                            SchedulesId = 13,
                            SlotsId = 16
                        },
                        new
                        {
                            Id = 13,
                            SchedulesId = 14,
                            SlotsId = 17
                        },
                        new
                        {
                            Id = 14,
                            SchedulesId = 15,
                            SlotsId = 18
                        },
                        new
                        {
                            Id = 15,
                            SchedulesId = 9,
                            SlotsId = 19
                        },
                        new
                        {
                            Id = 16,
                            SchedulesId = 7,
                            SlotsId = 20
                        },
                        new
                        {
                            Id = 17,
                            SchedulesId = 16,
                            SlotsId = 21
                        },
                        new
                        {
                            Id = 18,
                            SchedulesId = 17,
                            SlotsId = 22
                        });
                });

            modelBuilder.Entity("DAL.Models.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupsId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardNumber = "8252",
                            GroupsId = 1,
                            UserId = "d21d4f10-82b7-409b-b447-15478ed6c6f2"
                        },
                        new
                        {
                            Id = 2,
                            CardNumber = "2209",
                            GroupsId = 1,
                            UserId = "60d70ac4-f7ea-44c3-ba80-89fb25039b33"
                        },
                        new
                        {
                            Id = 3,
                            CardNumber = "3924",
                            GroupsId = 1,
                            UserId = "a23b98d9-288f-424a-b307-3fc787a0005b"
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d21d4f10-82b7-409b-b447-15478ed6c6f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "442b6721-a3e7-42ab-94bb-a3ba630c76d2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Иванович",
                            Name = "Иван",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9b367fd-74dd-4167-a96b-5c070032f230",
                            Surname = "Иванов",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "60d70ac4-f7ea-44c3-ba80-89fb25039b33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1b0d9f9-efa0-4753-86c2-837a44dba163",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Егорович",
                            Name = "Егор",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e84e34ac-e801-483e-8a60-3bb929798223",
                            Surname = "Егоров",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a23b98d9-288f-424a-b307-3fc787a0005b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44b2c6af-f3aa-496b-b0e8-7a891c8f4bfe",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Владиславович",
                            Name = "Влад",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76fe4a97-4cb4-4a9c-bb28-f95e60dd7d26",
                            Surname = "Владислов",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "577b9340-1a02-4316-a983-42d70127751c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0254e60f-f83a-4457-a7f4-9d570888f77b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Иванович",
                            Name = "Иван",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd48a304-ec6e-4959-859b-a8c0cbb592a0",
                            Surname = "Иванов",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fc9a3784-05a1-4e14-8b00-2a0692d7a8ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e30bad53-5e1e-465a-8f41-8c907c9b2c05",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Егорович",
                            Name = "Егор",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6485ec91-f55d-41fe-9f80-b36a67719285",
                            Surname = "Егоров",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8ed45042-5ce6-445b-a844-cf7a03eef945",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66f703ae-5b8f-429a-8d8f-761ff79059f8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Владиславович",
                            Name = "Влад",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f239dcb-14fe-494e-a310-5ddcabac3649",
                            Surname = "Владислов",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("DAL.Models.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            UserId = "577b9340-1a02-4316-a983-42d70127751c"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            UserId = "fc9a3784-05a1-4e14-8b00-2a0692d7a8ec"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            UserId = "577b9340-1a02-4316-a983-42d70127751c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3aa603b2-ce9f-4c84-9dfe-cd6b56a74c30",
                            ConcurrencyStamp = "1c47088f-552a-47fc-a1c3-8bb12930be3e",
                            Name = "Студент"
                        },
                        new
                        {
                            Id = "4f978b96-c136-48d7-a2ae-c97238ab0c8d",
                            ConcurrencyStamp = "192354b1-0a99-485c-9b10-44fa072140ab",
                            Name = "Преподаватель"
                        },
                        new
                        {
                            Id = "b5f14003-6e13-43c0-ac8d-16ee111f40ea",
                            ConcurrencyStamp = "e0306b46-48c9-4e12-bcbf-4eb4387fb060",
                            Name = "Декан"
                        },
                        new
                        {
                            Id = "e0621b50-4243-4206-93a4-b35d42fea37a",
                            ConcurrencyStamp = "5f44a1fe-cd84-442e-9f7e-6dbd41131959",
                            Name = "ЗамКафедры"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d21d4f10-82b7-409b-b447-15478ed6c6f2",
                            RoleId = "3aa603b2-ce9f-4c84-9dfe-cd6b56a74c30"
                        },
                        new
                        {
                            UserId = "60d70ac4-f7ea-44c3-ba80-89fb25039b33",
                            RoleId = "3aa603b2-ce9f-4c84-9dfe-cd6b56a74c30"
                        },
                        new
                        {
                            UserId = "a23b98d9-288f-424a-b307-3fc787a0005b",
                            RoleId = "3aa603b2-ce9f-4c84-9dfe-cd6b56a74c30"
                        },
                        new
                        {
                            UserId = "577b9340-1a02-4316-a983-42d70127751c",
                            RoleId = "4f978b96-c136-48d7-a2ae-c97238ab0c8d"
                        },
                        new
                        {
                            UserId = "fc9a3784-05a1-4e14-8b00-2a0692d7a8ec",
                            RoleId = "4f978b96-c136-48d7-a2ae-c97238ab0c8d"
                        },
                        new
                        {
                            UserId = "8ed45042-5ce6-445b-a844-cf7a03eef945",
                            RoleId = "4f978b96-c136-48d7-a2ae-c97238ab0c8d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Departments", b =>
                {
                    b.HasOne("DAL.Models.Facultyes", "Faculty")
                        .WithMany("DepartmentsAtTheFaculty")
                        .HasForeignKey("FacultyesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("DAL.Models.Groups", b =>
                {
                    b.HasOne("DAL.Models.Departments", "Department")
                        .WithMany("GroupsAtTheDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DAL.Models.GroupsSchedules", b =>
                {
                    b.HasOne("DAL.Models.Groups", "Groups")
                        .WithMany("Scheduls")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Schedules", "Schedules")
                        .WithMany("Groups")
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DAL.Models.Marks", b =>
                {
                    b.HasOne("DAL.Models.Pairs", "Pairs")
                        .WithMany()
                        .HasForeignKey("PairsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pairs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.Pairs", b =>
                {
                    b.HasOne("DAL.Models.SlotsSchedules", "SlotSchedule")
                        .WithMany("Pairs")
                        .HasForeignKey("SlotScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotSchedule");
                });

            modelBuilder.Entity("DAL.Models.Schedules", b =>
                {
                    b.HasOne("DAL.Models.Disciplines", "Disciplines")
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Workers", "Worker")
                        .WithMany("Schedules")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disciplines");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DAL.Models.SlotsSchedules", b =>
                {
                    b.HasOne("DAL.Models.Schedules", "Schedules")
                        .WithMany("Slots")
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Slots", "Slots")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedules");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DAL.Models.Students", b =>
                {
                    b.HasOne("DAL.Models.Groups", "Groups")
                        .WithMany("Students")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Workers", b =>
                {
                    b.HasOne("DAL.Models.Departments", "Department")
                        .WithMany("WorkerAtTheDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Departments", b =>
                {
                    b.Navigation("GroupsAtTheDepartment");

                    b.Navigation("WorkerAtTheDepartment");
                });

            modelBuilder.Entity("DAL.Models.Facultyes", b =>
                {
                    b.Navigation("DepartmentsAtTheFaculty");
                });

            modelBuilder.Entity("DAL.Models.Groups", b =>
                {
                    b.Navigation("Scheduls");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("DAL.Models.Schedules", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DAL.Models.Slots", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DAL.Models.SlotsSchedules", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("DAL.Models.Workers", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
